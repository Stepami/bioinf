/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bioinf;

import org.apache.commons.cli.*;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class App {
    private static Options getOptions() {
        var options = new Options();

        options
                .addOption(Option.builder("h")
                        .longOpt("help")
                        .hasArg(false)
                        .desc("print help")
                        .build())
                .addOption(Option.builder("i")
                        .hasArg()
                        .desc("seq files")
                        .numberOfArgs(Option.UNLIMITED_VALUES)
                        .build())
                .addOption(Option.builder("g")
                        .longOpt("gap")
                        .hasArg()
                        .type(Number.class)
                        .desc("gap value")
                        .build())
                .addOption(Option.builder("m")
                        .longOpt("match")
                        .hasArg()
                        .type(Number.class)
                        .desc("match value")
                        .build())
                .addOption(Option.builder("mm")
                        .longOpt("mismatch")
                        .hasArg()
                        .type(Number.class)
                        .desc("mismatch value")
                        .build())
                .addOption(Option.builder("o")
                        .hasArg()
                        .desc("out file")
                        .build())
                .addOption(Option.builder("l")
                        .longOpt("lab")
                        .hasArg()
                        .type(Number.class)
                        .desc("lab num")
                        .build())
                .addOption(Option.builder("b")
                        .longOpt("blosum")
                        .hasArg(false)
                        .desc("use blosum")
                        .build())
                .addOption(Option.builder("e")
                        .longOpt("eg")
                        .hasArg()
                        .type(Number.class)
                        .desc("extension gap")
                        .build());

        return options;
    }

    private static String getStringFromFile(String filename) throws IOException {
        var path = Paths.get(filename);
        var lines = Files.readAllLines(path);
        return lines.get(0);
    }

    private static List<String> getStringsFromFile(String filename) throws IOException {
        var path = Paths.get(filename);
        return Files.readAllLines(path);
    }

    public static void main(String[] args) {
        var options = getOptions();
        var cliParser = new DefaultParser();
        try {
            var cmd = cliParser.parse(options, args);

            if (cmd.hasOption('h')) {
                new HelpFormatter().printHelp("lab1", options, true);
            } else {

                var inputPoints = cmd.getOptionValues('i');
                String seq1, seq2;
                if (inputPoints.length == 1) {
                    var sequences = getStringsFromFile(inputPoints[0]);
                    seq1 = sequences.get(0);
                    seq2 = sequences.get(1);
                } else {
                    seq1 = getStringFromFile(inputPoints[0]);
                    seq2 = getStringFromFile(inputPoints[1]);
                }

                int gap = ((Number) cmd.getParsedOptionValue("gap")).intValue();

                int match = ((Number) cmd.getParsedOptionValue("m")).intValue();
                int mismatch = ((Number) cmd.getParsedOptionValue("mm")).intValue();

                Comparator<Sequence> comparator = new SequenceComparator(match, mismatch);
                if (cmd.hasOption("blosum")) {
                    comparator = new BlosumComparator();
                }

                int eGap = 0;
                if (cmd.hasOption("eg")) {
                    eGap = ((Number) cmd.getParsedOptionValue("eg")).intValue();
                }

                int lab = ((Number) cmd.getParsedOptionValue("lab")).intValue();

                AlignmentAlgorithm algo;
                switch (lab) {
                    case 1 -> algo = new NeedlemanWunsch(gap, comparator);
                    case 2 -> algo = new Hirschberg(gap, comparator);
                    case 3 -> algo = new AffineNeedlemanWunsch(gap, comparator, eGap);
                    case 4 -> {
                        List<String> seqList = new ArrayList<>(Arrays.asList(
                                "GATTCA",
                                "GTCTGA",
                                "GATATT",
                                "GTCAGC"
                        ));
                        var star = new StarAlgorithm(seqList, gap);
                        if (cmd.hasOption('o')) {
                            try (var out = new PrintWriter(cmd.getOptionValue('o'))) {
                                out.print(star.computeAlignment());
                            }
                        } else {
                            System.out.println(star.computeAlignment());
                        }
                        return;
                    }
                    default -> throw new IllegalStateException("Unexpected value: " + lab);
                }

                var result = algo.compute(new Sequence(seq1), new Sequence(seq2));

                if (cmd.hasOption('o')) {
                    try (var out = new PrintWriter(cmd.getOptionValue('o'))) {
                        out.print(result);
                    }
                } else {
                    System.out.println(result);
                }
            }
        } catch (ParseException | IOException e) {
            e.printStackTrace();
        }
    }
}
